name: CI/CD Helm Chart Promotion Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - develop

jobs:
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for Dev
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::707809188586:role/dst-dev-github-deployment-role
          aws-region: us-east-1

      - name: Update kubeconfig for Dev
        run: aws eks update-kubeconfig --region us-east-1 --name dst-dev-cluster

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      # - name: Create or Update API Key Secret in Dev
      #   run: |
      #     kubectl create secret generic openai-api-key \
      #       --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
      #       --namespace dev --dry-run=client -o yaml | kubectl apply -f -

      #     kubectl create secret generic deepl-api-key \
      #     --from-literal=DEEPL_API_KEY=${{ secrets.DEEPL_API_KEY }} \
      #     --namespace dev --dry-run=client -o yaml | kubectl apply -f -

      # - name: Determine Image Tag
      #   id: set_tag
      #   run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Deploy Helm Chart to Dev
        run: |
          helm upgrade --install dev-dst-translator ./helm/dst-translator \
            --namespace dev \
            --create-namespace \
            --values helm/values-dev.yaml \
      # --set image.tag=${{ env.IMAGE_TAG }}

      - name: Wait for Deployment to Stabilize
        run: sleep 15

      - name: Run Integration Tests on Dev
        run: |
          echo ">> Running basic connection test"
          HOSTNAME=$(kubectl get ingress dev-dst-translator-dst-translator-ingress -n dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Ingress hostname: ${HOSTNAME}"
          curl --fail http://${HOSTNAME}/health || exit 1
          echo "Dev tests passed"


  package-artifact:
    name: Package Helm Chart Artifact
    needs: deploy-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Package Helm Chart
        run: helm package ./helm/myapp --version ${GITHUB_SHA} --destination packaged-charts

      - name: Upload Helm Chart Artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: packaged-charts/*.tgz

  promote-to-stage:
    name: Promote to Stage
    needs: package-artifact
    runs-on: ubuntu-latest
    environment: stage  # Requires manual approval via GitHub environment protection
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create or Update API Key Secret in Stage
        run: |
          kubectl create secret generic openai-api-key \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --namespace dev --dry-run=client -o yaml | kubectl apply -f -

      - name: Configure AWS Credentials for Stage
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dst-stage-github-infrastructure-role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for Stage
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name dst-stage-cluster

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Download Helm Chart Artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-chart

      - name: Deploy Helm Chart to Stage
        run: |
          helm upgrade --install myapp-stage ./packaged-charts/*.tgz \
            --namespace stage \
            --create-namespace \
            --values helm/values-stage.yaml \
            --set image.tag=${{ env.IMAGE_TAG }}

      - name: Wait for Deployment to Stabilize
        run: sleep 15

      - name: Run Integration Tests on Stage
        run: |
          curl --fail http://myapp-stage.stage.svc.cluster.local/health || exit 1
          echo "Stage tests passed"

  # promote-to-prod:
  #   name: Promote to Prod
  #   needs: promote-to-stage
  #   runs-on: ubuntu-latest
  #   environment: prod  # Requires manual approval via GitHub environment protection
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Create or Update API Key Secret in Prod
  #       run: |
  #         kubectl create secret generic openai-api-key \
  #           --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
  #           --namespace dev --dry-run=client -o yaml | kubectl apply -f -

  #     - name: Configure AWS Credentials for Prod
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/dst-prod-github-infrastructure-role
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kubeconfig for Prod
  #       run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name dst-prod-cluster

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v1

  #     - name: Download Helm Chart Artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: helm-chart

  #     - name: Deploy Helm Chart to Prod
  #       run: |
  #         helm upgrade --install myapp-prod ./packaged-charts/*.tgz \
  #           --namespace prod \
  #           --create-namespace \
  #           --values helm/values-prod.yaml \
  #           --set image.tag=${{ env.IMAGE_TAG }}

  #     - name: Wait for Deployment to Stabilize
  #       run: sleep 15

  #     - name: Run Integration Tests on Prod
  #       run: |
  #         curl --fail http://myapp-prod.prod.svc.cluster.local/health || exit 1
  #         echo "Prod tests passed"
